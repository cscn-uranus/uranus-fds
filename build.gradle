buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
        classpath("gradle.plugin.cn.bestwu.gradle:propdeps-plugin:0.0.10")
    }

}

apply plugin: "java"
apply plugin: "war"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "cn.bestwu.propdeps"
apply plugin: "jacoco"

task local {
    doLast {
        changeActiveProfile("local")
    }
}
task dev {
    doLast {
        changeActiveProfile("dev")
    }
}
task release {
    doLast {
        changeActiveProfile("release")
    }
}
def changeActiveProfile(profile) {
    def pFile = file("src/main/resources/application.properties")
    Properties p = new Properties()
    pFile.withInputStream { stream ->
        p.load(stream)
    }
    p.setProperty("spring.profiles.active", profile)
    pFile.withOutputStream { stream ->
        p.store(stream, "Change active profile to ${profile}")
    }
}

wrapper {
    gradleVersion = "4.1"
}

war {
    baseName = "uranus-fds-api"
    version = "0.0.1"
}

jar {
    baseName = "uranus-fds-api"
    version = "0.0.1"
}

jacoco {
    reportsDir = file("$buildDir/jacoco/report")
}
jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
    }
}

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {

    // boot starter
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    // Active MQ
    compile("org.springframework.boot:spring-boot-starter-activemq")
    compile("org.apache.activemq:activemq-broker")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")

    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    // Use MySQL Connector-J
    compile("mysql:mysql-connector-java")

    testCompile("org.springframework.boot:spring-boot-starter-test")

    optional("org.springframework.boot:spring-boot-configuration-processor")


}
compileJava.dependsOn(processResources)



